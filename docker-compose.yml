version: "3.9"
services:

  frontend:
    image: frontend-image
    ports:
      - 80:80
    build:
      context: ./chat-frontend
      dockerfile: Dockerfile
      target: production
    restart: always

  api-node:
    image: api-node-image
    ports:
      - '3001:3000'
    build:
      context: ./chat-api-node
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      POSTGRES_HOST: psql
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      REDIS_HOST: redis
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      SECRET_JWT: "${SECRET_JWT}"
    depends_on:
      - psql
      - redis
      - nginx

  api-py:
    image: api-py-image
    ports:
      - '3002:3000'
    build:
      context: ./chat-api-py
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      POSTGRES_HOST: psql
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      REDIS_HOST: redis
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      SECRET_JWT: "${SECRET_JWT}"
    depends_on:
      - psql
      - redis
      - nginx

  api-go:
    image: api-go-image
    ports:
      - '3003:3000'
    build:
      context: ./chat-api-go
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      POSTGRES_HOST: psql
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      REDIS_HOST: redis
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      SECRET_JWT: "${SECRET_JWT}"
    depends_on:
      - psql
      - redis
      - nginx

  nginx:
    image: nginx:latest
    restart: on-failure
    ports:
      - 3000:3333
    volumes:
      - ./proxy/proxy.conf:/etc/nginx/nginx.conf:ro

  chat-node:
    image: chat-server-node
    build:
      context: ./chat-server-node
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      POSTGRES_HOST: psql
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      REDIS_HOST: redis
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      SECRET_JWT: "${SECRET_JWT}"
    ports:
      - 8077:8077
    depends_on:
      - redis

  chat-py:
    image: chat-server-py
    build:
      context: ./chat-server-py
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      POSTGRES_HOST: psql
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
      REDIS_HOST: redis
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
      SECRET_JWT: "${SECRET_JWT}"
    ports:
      - 8078:8078
    depends_on:
      - redis

  psql:
    image: postgres:latest
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: on-failure
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    volumes:
      - sqldata:/var/lib/postgresql/data
      - ./psql:/docker-entrypoint-initdb.d

  redis:
    image: 'redis:latest'
    environment:
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL,CONFIG
      - REDIS_PASSWORD="${REDIS_PASSWORD}"
    restart: on-failure
    ports:
      - "${REDIS_PORT}:6379"
    command:
      - /bin/sh
      - -c
      - redis-server --requirepass "${REDIS_PASSWORD}"
    volumes:
      - /data/redis

volumes:
  sqldata:
